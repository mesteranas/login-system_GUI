import PyQt6.QtWidgets as qt
import PyQt6.QtGui as qt1
import PyQt6.QtCore as qt2
from . import models,userManager
# create your forms
class NewUser(qt.QDialog):
    def __init__(self,p):
        super().__init__(p)
        self.setWindowTitle(_("create new user"))
        self.first_name=qt.QLineEdit()
        self.first_name.setAccessibleName(_("first name"))
        self.last_name=qt.QLineEdit()
        self.last_name.setAccessibleName(_("last name"))
        self.email=qt.QLineEdit()
        self.email.setAccessibleName(_("email"))
        self.gender=qt.QComboBox()
        self.gender.addItems(["male","female"])
        self.gender.setAccessibleName(_("gender"))
        self.bio=qt.QLineEdit()
        self.bio.setAccessibleName(_("bio"))
        self.user_name=qt.QLineEdit()
        self.user_name.setAccessibleName(_("user name"))
        self.password=qt.QLineEdit()
        self.password.setEchoMode(qt.QLineEdit.EchoMode.Password)
        self.password.setAccessibleName(_("password"))
        self.create=qt.QPushButton(_("create"))
        self.create.clicked.connect(lambda:self.oncreate(p))
        layout=qt.QVBoxLayout(self)
        layout.addWidget(self.first_name)
        layout.addWidget(self.last_name)
        layout.addWidget(self.email)
        layout.addWidget(self.gender)
        layout.addWidget(self.user_name)
        layout.addWidget(self.bio)
        layout.addWidget(self.password)
        layout.addWidget(self.create)
    def oncreate(self,p):
        setion=models.get_session()
        user=models.user(first_name=self.first_name.text(),last_name=self.last_name.text(),email=self.email.text(),bio=self.bio.text(),gender=self.gender.currentText(),user_name=self.user_name.text(),password=self.password.text())
        setion.add(user)
        setion.commit()
        userManager.lugin(self.user_name.text())
        p.showHide(1)
        self.close()
class Login(qt.QDialog):
    def __init__(self,p):
        super().__init__(p)
        self.setWindowTitle(_("login"))
        self.user_name=qt.QLineEdit()
        self.user_name.setAccessibleName(_("user name"))
        self.password=qt.QLineEdit()
        self.password.setAccessibleName(_("password"))
        self.password.setEchoMode(qt.QLineEdit.EchoMode.Password)
        self.login=qt.QPushButton(_("login"))
        self.login.clicked.connect(lambda:self.log(p))
        layout=qt.QVBoxLayout(self)
        layout.addWidget(self.user_name)
        layout.addWidget(self.password)
        layout.addWidget(self.login)
    def log(self,p):
        setion=models.get_session()
        log=setion.query(models.user).filter_by(user_name=self.user_name.text()).first()
        if log:
            if self.password.text()==log.password:
                userManager.lugin(self.user_name.text())
                p.showHide(1)
                self.close()
class changePassword(qt.QDialog):
    def __init__(self,p):
        super().__init__(p)
        self.setWindowTitle(_("change password"))
        self.currentPassword=qt.QLineEdit()
        self.currentPassword.setAccessibleName(_("current password"))
        self.currentPassword.setEchoMode(qt.QLineEdit.EchoMode.Password)
        self.newPassword=qt.QLineEdit()
        self.newPassword.setAccessibleName(_("new password"))
        self.newPassword.setEchoMode(qt.QLineEdit.EchoMode.Password)
        self.change=qt.QPushButton(_("change"))
        self.change.clicked.connect(self.log)
        layout=qt.QVBoxLayout(self)
        layout.addWidget(self.currentPassword)
        layout.addWidget(self.newPassword)
        layout.addWidget(self.change)
    def log(self):
        setion=models.get_session()
        log1=setion.query(models.Auth).filter_by(serial=userManager.get_serial_number()).first()
        log=setion.query(models.user).filter_by(user_name=log1.User).first()
        if log:
            if self.currentPassword.text()==log.password:
                log.password=self.newPassword.text()
                setion.commit()
                self.close()
class EditProfile(qt.QDialog):
    def __init__(self,p):
        super().__init__(p)
        self.setWindowTitle(_("edit profile"))
        setion=models.get_session()
        log1=setion.query(models.Auth).filter_by(serial=userManager.get_serial_number()).first()
        log=setion.query(models.user).filter_by(user_name=log1.User).first()
        self.first_name=qt.QLineEdit()
        self.first_name.setAccessibleName(_("first name"))
        self.first_name.setText(log.first_name)
        self.last_name=qt.QLineEdit()
        self.last_name.setAccessibleName(_("last name"))
        self.last_name.setText(log.last_name)
        self.email=qt.QLineEdit()
        self.email.setAccessibleName(_("email"))
        self.email.setText(log.email)
        self.bio=qt.QLineEdit()
        self.bio.setAccessibleName(_("bio"))
        self.bio.setText(log.bio)
        self.edit=qt.QPushButton(_("edit"))
        self.edit.clicked.connect(self.log)
        layout=qt.QVBoxLayout(self)
        layout.addWidget(self.first_name)
        layout.addWidget(self.last_name)
        layout.addWidget(self.email)
        layout.addWidget(self.bio)
        layout.addWidget(self.edit)
    def log(self):
        setion=models.get_session()
        log1=setion.query(models.Auth).filter_by(serial=userManager.get_serial_number()).first()
        log=setion.query(models.user).filter_by(user_name=log1.User).first()
        if log:
            log.first_name=self.first_name.text()
            log.last_name=self.last_name.text()
            log.email=self.email.text()
            log.bio=self.bio.text()
            setion.commit()
            self.close()
class DeleteAccount(qt.QDialog):
    def __init__(self,p):
        super().__init__(p)
        self.setWindowTitle(_("delete account"))
        self.password=qt.QLineEdit()
        self.password.setEchoMode(self.password.EchoMode.Password)
        self.delete=qt.QPushButton(_("delete account"))
        self.delete.clicked.connect(self.on_delete)
        layout=qt.QVBoxLayout(self)
        layout.addWidget(qt.QLabel(_("password")))
        layout.addWidget(self.password)
        layout.addWidget(self.delete)
    def on_delete(self):
        session=models.get_session()
        authModel=session.query(models.Auth).filter_by(serial=userManager.get_serial_number()).first()
        if authModel:
            profileModel=session.query(models.user).filter_by(  user_name=authModel.User).first()
            if profileModel.password==self.password.text():
                session.delete(profileModel)
                userManager.logout()
                session.commit()
                qt.QMessageBox.information(self,_("done"),_("account deleted"))
                self.close()
                return
        qt.QMessageBox.warning(self,_("error"),_("can't delete this account , may be the password is wrong"))